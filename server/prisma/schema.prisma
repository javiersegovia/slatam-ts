datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../../generated/"
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

model User {
  id                      Int               @id @default(autoincrement())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  email                   String            @unique
  password                String
  firstName               String?
  lastName                String?
  posts                   Post[]
  refreshTokens           RefreshToken[]
  companyMember           CompanyMember?
  verification            UserVerification?
  resetPasswordToken      String?           @unique
  resetPasswordExpiration DateTime?
  information             UserInformation?
}

model UserInformation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  address   Address?
  age       DateTime?
  gender    Gender?
}

model UserVerification {
  id                    String    @id @default(cuid())
  verifiedEmail         Boolean   @default(false)
  verifyEmailToken      String?   @unique
  verifyEmailExpiration DateTime?
  user                  User      @relation(fields: [userId], references: [id])
  userId                Int
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model RefreshToken {
  id         String   @id @default(cuid())
  expiryDate DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

model Company {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  name      String
  members   CompanyMember[]
  products  Product[]
}

model CompanyMember {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  company   Company             @relation(fields: [companyId], references: [id])
  companyId Int
  user      User                @relation(fields: [userId], references: [id])
  userId    Int
  roles     CompanyMemberRole[]
}

enum CompanyMemberRole {
  MEMBER
  MANAGER
  OWNER
}

model Product {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String?
  status      ProductStatus @default(INACTIVE)
  owner       Company       @relation(fields: [companyId], references: [id])
  companyId   Int
}

enum ProductStatus {
  INACTIVE
  ACTIVE
}

model Address {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  country     Country         @relation(fields: [countryId], references: [id])
  countryId   Int
  description String?
  postalCode  String?
  owner       UserInformation @relation(fields: [ownerId], references: [id])
  ownerId     String
}

model Country {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  flag      String
  code2     String
  address   Address[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
}
